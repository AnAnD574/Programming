ANGULAR JS INTRODUCTION:

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular.min.js"></script>: It's important to include this script tag before any AngularJS code or directives in your HTML file to ensure that AngularJS is loaded and available for use.
>The ng-app directive defines an AngularJS application.
>The ng-model directive binds the value of HTML controls (input, select, textarea) to application data.
>The ng-bind directive binds application data to the HTML view. 
>The ng-init directive initializes AngularJS application variables.
>AngularJS expressions are written inside double braces: {{ expression }}. AngularJS will "output" data exactly where the expression is written.
>Angular JS modules define AngularJS application.--> ng-app
>Angular JS controllers controls Angularjs applications.--> ng-controllers

ANGULARJS EXPRESSIONS:

>ng-bind or {{}}. But it is better to use ng-bind.

ANGULARJS MODULES:

>An AngularJS module defines an application. The module is a container for the different parts of an application. The module is a container for the application controllers.
> Syntax: var app = angular.module("myApp", []); 
   The [] parameter in the module definition can be used to define dependent modules. Without the [] parameter, you are not creating a new module, but retrieving an existing one.
   
ANGULARJS DIRECTIVES:

> AngularJS lets you extend HTML with new attributes called Directives. AngularJS has a set of built-in directives which offers functionality to your applications. AngularJS also lets you define your own directives.
> ng-repeat: directive repeats an html element
> ng-init: The ng-init directive defines initial values for an AngularJS application.
> new directives can be created using .directive function.
> You can restrict your directives to only be invoked by some of the methods. By adding a restrict property with the value "E/A/C.M", the directive can only be invoked.

ANGULARJS ng-model:

> With the ng-model directive you can bind the value of an input field to a variable created in AngularJS.
> Two way binding.  If the user changes the value inside the input field, the AngularJS property will also change its value:
> Validate user input: ng-model directive can provide type validation for application data (number, e-mail, required)
  Ex: <span ng-show = myForm.myAddress.$error.email> Not proper email address </span>
  span will be displayed only if the expression in the ng-show attribute returns true
> Application status: ng-model directive can provide status for application data (valid, dirty, touched, error)
> Valid: This state indicates that the value in the form control meets all validation criteria defined for it. AngularJS sets the validity state of a form control based on the validation rules specified using directives such as ng-required, ng-minlength, ng-maxlength, etc.
>Dirty: A form control is considered "dirty" if its value has been changed from the initial value. In other words, if the user interacts with the form control and changes its value, it becomes dirty.
>Touched: A form control is marked as "touched" when it loses focus. So, if the user clicks into a form field, interacts with it, and then moves to another field or clicks outside the field, AngularJS marks the control as "touched".	

CSS Class:

> ng-empty, ng-not-empty, ng-touched, ng-untouched, ng-valid, ng-invalid, ng-dirty, ng-pending, ng-pristine

DATA BINDING:

> Data binding in AngularJS is the synchronization between the model and the view.
   var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {
  $scope.firstname = "John";
  $scope.lastname = "Doe";
});
> The data model is a collection of data available for the application.
> The HTML container where the AngularJS application is displayed, is called the view. The view has access to the model, and there are several ways of displaying model data in the view.
> ng-bind/{{}} is used to bind the values in the field ..whereas ng-model is added in the html controllers.
 Two way binding:
> Data binding in AngularJS is the synchronization between the model and the view. When data in the model changes, the view reflects the change, and when data in the view changes, the model is updated as well. This happens immediately and automatically, which makes sure that the model and the view is updated at all times.

CONTROLLERS:

>AngularJS controllers are regular JavaScript Objects. The ng-controller directive defines the application controller. 
> In AngularJS, $scope is the application object (the owner of application variables and functions).
> A controller can also have methods (variables as functions).

SCOPES:

> scope is the binding part between the HTML (view) and the JavaScript (controller)
> When adding properties to the $scope object in the controller, the view (HTML) gets access to these properties.
>If we consider an AngularJS application to consist of:
    View, which is the HTML.
    Model, which is the data available for the current view.
    Controller, which is the JavaScript function that makes/changes/removes/controls the data.
Then the scope is the Model.
> Root scope:  $rootScope is a special scope that is the parent of all other scopes in the application. It's a global object that's accessible throughout the entire AngularJS application, and any variable or function attached to it becomes available to all scopes

FILTERS:

> Filters can be added in AngularJS to format data. 
currency, date, filter, json, limitTo, lowercase, number, orderBy, uppercase 

Adding filters to expressions:
> Filters can be added to expressions by using the pipe character |, followed by a filter.

Adding Filters to Directives:
> Filters are added to directives, like ng-repeat, by using the pipe character |, followed by a filter.

> The filter filter can only be used on arrays, and it returns an array containing only the matching items.
> Custom filter: You can make your own filters by registering a new filter factory function with your module

SERVICE:

> In AngularJS, a service is a function, or object, that is available for, and limited to, your AngularJS application. AngularJS has about 30 built-in services. One of them is the $location service. The $location service has methods which return information about the location of the current web page.
> The $http service is one of the most common used services in AngularJS applications. The service makes a request to the server, and lets your application handle the response.
> The $timeout service runs a function after a specified number of milliseconds.
> To create your own service, connect your service to the module. To use your custom made service, add it as a dependency when defining the controller.

HTTP:

>The AngularJS $http service makes a request to the server, and returns a response.

Methods
> Shortcuts for calling http services..
    .delete()
    .get()
    .head()
    .jsonp()
    .patch()
    .post()
    .put()

Properties:
.config the object used to generate the request.
.data a string, or an object, carrying the response from the server.
.headers a function to use to get header information.
.status a number defining the HTTP status.
.statusText a string defining the HTTP status

TABLES:

> The ng-repeat directive is perfect for displaying tables. 
